// Generated by CoffeeScript 1.9.3
(function() {
  var MarkedRenderer;

  MarkedRenderer = (function() {
    function MarkedRenderer(document) {
      this.document = document;
      return this;
    }

    MarkedRenderer.prototype.code = function(code, lang, escaped) {
      return this.document._code(code, lang);
    };

    MarkedRenderer.prototype.blockquote = function(quote) {
      return console.log('blockquote');
    };

    MarkedRenderer.prototype.html = function(html) {
      return console.log('html');
    };

    MarkedRenderer.prototype.heading = function(text, depth, raw) {
      return this.document.h(text, depth);
    };

    MarkedRenderer.prototype.hr = function() {
      return console.log('hr');
    };

    MarkedRenderer.prototype.paragraph = function(text) {
      return this.document.p(text);
    };

    MarkedRenderer.prototype.table = function(header, body) {
      return console.log('table');
    };

    MarkedRenderer.prototype.tablerow = function(content) {
      return console.log('tablerow');
    };

    MarkedRenderer.prototype.tablecell = function(content, flags) {
      return console.log('tablecell');
    };

    MarkedRenderer.prototype.strong = function(text) {
      return '#{bold("' + text + '")}';
    };

    MarkedRenderer.prototype.em = function(text) {
      return '#{italic("' + text + '")}';
    };

    MarkedRenderer.prototype.codespan = function(text) {
      return '#{mono("' + text + '")}';
    };

    MarkedRenderer.prototype.br = function() {
      return '#{br()}';
    };

    MarkedRenderer.prototype.del = function(text) {
      return console.log('del');
    };

    MarkedRenderer.prototype.link = function(href, title, text) {
      return '#{hyperlink("' + text + '", "' + href + '")}';
    };

    MarkedRenderer.prototype.image = function(href, title, text) {
      return console.log('image');
    };

    MarkedRenderer.prototype.text = function(text) {
      var lquote, rquote, s;
      while ((s = text.match(/([^#]*#\{)([^]*&quot;[^\}]*)(\}[^]*)/)) != null) {
        text = s[1] + s[2].replace(/&quot;/g, '"') + s[3];
      }
      while ((s = text.match(/([^#]*#\{)([^]*&#39;[^\}]*)(\}[^]*)/)) != null) {
        text = s[1] + s[2].replace(/&#39;/g, '\'') + s[3];
      }
      lquote = this.document.theme.options.typography.lquote;
      rquote = this.document.theme.options.typography.rquote;
      return text;
    };

    return MarkedRenderer;

  })();

  module.exports = MarkedRenderer;

}).call(this);
