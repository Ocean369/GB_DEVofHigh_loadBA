// Generated by CoffeeScript 1.9.3
(function() {
  module.exports = {
    typography: function(text) {
      return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/'''/g, "‴").replace(/(\W|^)"(\S)/g, "$1“$2").replace(/(\u201c[^"]*)"([^"]*$|[^\u201c"]*\u201c)/g, "$1”$2").replace(/([^0-9])"/g, "$1”").replace(/''/g, "″").replace(/(\W|^)'(\S)/g, "$1‘$2").replace(/([a-z])'([a-z])/gi, "$1’$2").replace(/((\u2018[^']*)|[a-z])'([^0-9]|$)/gi, "$1’$3").replace(/(\u2018)([0-9]{2}[^\u2019]*)(\u2018([^0-9]|$)|$|\u2019[a-z])/gi, "’$2$3").replace(/(\B|^)\u2018(?=([^\u2019]*\u2019\b)*([^\u2019\u2018]*\W[\u2019\u2018]\b|[^\u2019\u2018]*$))/gi, "$1’").replace(/'/g, "′");
    },
    richText: function(text, options) {
      var c, command, i, len, nesting, plainText, result, state, states;
      if (options == null) {
        options = {};
      }
      if (options.outline) {
        this.addOutline(text, options);
      }
      options.continued = true;
      if (options.link == null) {
        options.link = '';
      }
      i = 0;
      len = text.length;
      plainText = '';
      command = '';
      states = {
        idle: 0,
        nearly: 1,
        inside: 2
      };
      state = states.idle;
      nesting = -1;
      while (i < len) {
        switch (c = text[i++]) {
          case '#':
            if (state === states.idle) {
              state = states.nearly;
            } else if (state === states.inside) {
              command += c;
            } else {
              plainText += c;
              state = states.idle;
            }
            break;
          case '{':
            if (state === states.nearly) {
              state = states.inside;
              nesting = 0;
              this.decoratedText(plainText, options);
              plainText = '';
            } else if (state === states.inside) {
              ++nesting;
              command += c;
            } else {
              plainText += c;
            }
            break;
          case '}':
            if (state === states.inside) {
              --nesting;
              if (nesting >= 0) {
                command += c;
              } else {
                state = states.idle;
                result = eval('this.' + command);
                command = '';
              }
            } else {
              plainText += c;
            }
            break;
          default:
            if (state === states.idle) {
              plainText += c;
            }
            if (state === states.nearly) {
              plainText += '#' + c;
              state = states.idle;
            } else if (state === states.inside) {
              if (nesting > 0 && c === '"') {
                command += '\\';
              }
              command += c;
            }
        }
      }
      this.decoratedText(plainText, options);
      return this;
    },
    decoratedText: function(text, options) {
      if (options == null) {
        options = {};
      }
      if (text.length > 0) {
        text = this.typography(text.replace(/&quot;/g, '"').replace(/&#39;/g, '\''));
        this.text(text, options);
      }
      return this;
    },
    br: function() {
      var needUp;
      needUp = false;
      if (this._wrapper != null) {
        needUp = (this._wrapper.continuedX + this.widthOfString(' ')) > this.width;
      }
      this.text(' ');
      if (needUp) {
        this.moveUp();
      }
      return this;
    },
    h: function(text, depth, addToToc) {
      var headerItem, ref, style;
      if (depth == null) {
        depth = 1;
      }
      if (addToToc == null) {
        addToToc = true;
      }
      style = this.theme.apply("h" + depth);
      if ((style.newPage != null) && style.newPage) {
        this.newPage();
      }
      if (addToToc) {
        headerItem = {
          page: this.pageNumber,
          depth: depth,
          text: text,
          y: this.y
        };
        this._headers.push(headerItem);
      }
      this.richText(text, {
        align: (ref = style.align) != null ? ref : 'left',
        outline: depth
      }).br();
      if (style.underline) {
        this.moveTo(this.page.width - this.page.margins.right - this.widthOfString(text), this.y).lineTo(this.page.width - this.page.margins.right, this.y).stroke(style.lineColor || style.color || 'black');
      }
      if (style.after != null) {
        this.moveDown(style.after);
      }
      return this;
    },
    h1: function(text, addToToc) {
      if (addToToc == null) {
        addToToc = true;
      }
      return this.h(text, 1, addToToc);
    },
    h2: function(text, addToToc) {
      if (addToToc == null) {
        addToToc = true;
      }
      return this.h(text, 2, addToToc);
    },
    h3: function(text, addToToc) {
      if (addToToc == null) {
        addToToc = true;
      }
      return this.h(text, 3, addToToc);
    },
    p: function(text) {
      var style;
      style = this.theme.apply('p');
      this.richText(text).br();
      if (style.after != null) {
        this.moveDown(style.after);
      }
      return this;
    },
    code: function(code, lang) {
      var indent, style;
      style = this.theme.apply('code');
      indent = style.indent || 0;
      this.x += indent;
      this.text(code);
      this.x -= indent;
      if (style.after != null) {
        this.moveDown(style.after);
      }
      return this;
    },
    bold: function(text) {
      this.theme.setBoldFont();
      this.richText(text);
      this.theme.restoreFont();
      return this;
    },
    italic: function(text) {
      this.theme.setItalicFont();
      this.richText(text);
      this.theme.restoreFont();
      return this;
    },
    mono: function(text) {
      this.theme.setMonoFont();
      this.richText(text);
      return this.theme.restoreFont();
    },
    hyperlink: function(text, href) {
      var h, style, w, x;
      this.theme.save();
      style = this.theme.apply('link');
      x = this._wrapper != null ? this._wrapper.continuedX + this.left : this.x;
      w = this.widthOfString(text);
      h = this.currentLineHeight(true);
      if (this.y + h > this.bottom) {
        this.addPage();
      }
      if ((style.custom != null) && style.custom) {
        this.theme.link(text, href, x, this.y, w, h);
      } else {
        this.richText(text, {
          link: href
        });
      }
      return this.theme.restore();
    },
    _listStart: function(ordered) {
      if (ordered == null) {
        ordered = false;
      }
      this.theme.apply('list');
      if (this._listLevel == null) {
        this._listLevel = 0;
      }
      ++this._listLevel;
      return this;
    },
    _listEnd: function() {
      var style;
      style = this.theme.apply('list');
      --this._listLevel;
      if (style.after != null) {
        this.moveDown(style.after);
      }
      return this;
    },
    _listItem: function(text) {
      var h, indent, style, w;
      style = this.theme.apply('listItem');
      h = this.currentLineHeight(true);
      w = h / 3;
      indent = style.indent || 0;
      if (this.y + h > this.bottom) {
        this.addPage();
      }
      this.x += this._listLevel * indent;
      this.rect(this.x - 2 * w, this.y + w, w, w).fill(style.bulletColor);
      this.fillColor(style.fillColor || 'black').richText(text, {
        width: this.width - this._listLevel * indent
      }).br();
      this.x -= this._listLevel * indent;
      return this;
    }
  };

}).call(this);
