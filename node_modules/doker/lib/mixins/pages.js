// Generated by CoffeeScript 1.9.3
(function() {
  module.exports = {
    newPage: function() {
      return this.addPage(this.options);
    },
    titlePage: function(title, subtitle) {
      var style;
      this.pageNumberAliases[this.pageNumber] = null;
      if (this.theme.titlePage != null) {
        this.theme.titlePage(title, subtitle);
        return this;
      }
      style = this.theme.apply('title');
      this.text(title, this.x, this.cy - this.heightOfString(title), {
        align: 'center',
        underline: style.underline || false
      });
      this.theme.apply('subtitle');
      this.text(subtitle, this.x, this.cy, {
        align: 'center'
      });
      return this;
    },
    pageIncrement: function(number) {
      return number + 1;
    },
    _endPages: function() {
      var i, maxPage, p, px, py, ref, results, style, text, x, y;
      style = this.theme.apply('pageNumber');
      maxPage = this.pageNumber;
      x = style.dx || (this.left / 2);
      y = style.dy || (this.bottom / 2);
      results = [];
      for (p = i = 0, ref = maxPage; 0 <= ref ? i <= ref : i >= ref; p = 0 <= ref ? ++i : --i) {
        if (this.pageNumberAliases[p] != null) {
          text = this.pageNumberAliases[p].toString();
          this.switchToPage(p);
          px = x;
          py = y;
          if (style.hposition != null) {
            switch (style.hposition) {
              case 'right':
                px = this.page.width - px;
                break;
              case 'center':
                px = this.page.width / 2;
            }
          }
          if (style.vposition != null) {
            switch (style.vposition) {
              case 'bottom':
                py = this.page.height - py;
                break;
              case 'center':
                py = this.page.height / 2;
            }
          }
          this.fillColor(style.color || 'black')._fragment(this.pageNumberAliases[p], px - this.widthOfString(text) / 2, py - this.heightOfString(text) / 2, {});
          if (style.decorate) {
            results.push(this.theme.pageNumber(p, maxPage + 1, px, py));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

}).call(this);
