// Generated by CoffeeScript 1.9.3
(function() {
  module.exports = {
    tableOfContents: function(pageCount) {
      var style;
      if (pageCount == null) {
        pageCount = 1;
      }
      style = this.theme.apply('h1');
      if (!style.newPage) {
        this.newPage();
      }
      this.h1('Table of Contents', false);
      this._tocPageNum = this.pageNumber;
      --pageCount;
      this._tocX = this.x;
      this._tocY = this.y;
      while (pageCount-- > 0) {
        this.newPage();
      }
      return this;
    },
    _endToc: function() {
      var cx, d, h, i, indent, len, page, pageNumAlias, ref, style, w, x, y;
      if (this._tocPageNum == null) {
        return this;
      }
      this.switchToPage(this._tocPageNum);
      this.x = this._tocX;
      this.y = this._tocY;
      this.fillColor('black');
      ref = this._headers;
      for (i = 0, len = ref.length; i < len; i++) {
        h = ref[i];
        style = this.theme.apply("toc.h" + h.depth);
        indent = style.indent || 0;
        this.x += indent;
        x = this.x;
        y = this.y;
        pageNumAlias = (this.pageNumberAliases[h.page] || h.page).toString();
        w = this.width - this.widthOfString(pageNumAlias) - indent;
        this.richText(h.text, {
          width: this.width - indent,
          continued: true
        });
        if (style.delimiter != null) {
          d = ' ';
          cx = this._wrapper != null ? this._wrapper.continuedX : this.x;
          while (cx + this.widthOfString(d + style.delimiter + ' ') < w) {
            d += style.delimiter;
          }
          if (style.delimiterColor != null) {
            this.fillColor(style.delimiterColor);
          }
          this.text(d, {
            continued: true
          });
          this.fillColor(style.color || 'black');
        }
        this.text(pageNumAlias, {
          align: 'right'
        });
        page = this._pageBuffer[h.page];
        this.annotate(x, y, this.page.width - this.page.margins.right - x, this.heightOfString(h.text), {
          Subtype: 'Link',
          Dest: [page.dictionary, 'XYZ', 0, page.height - h.y, 0]
        });
        this.x -= indent;
      }
      return this;
    }
  };

}).call(this);
