// Generated by CoffeeScript 1.9.3
(function() {
  var MarkedRenderer, fs, marked;

  fs = require('fs');

  marked = require('marked');

  MarkedRenderer = require('../marked_renderer');

  module.exports = {
    markdown: function(fileName) {
      var data, i, inListItem, itemText, len, t, tokens;
      data = fs.readFileSync(fileName).toString();
      marked.setOptions({
        renderer: new MarkedRenderer(this),
        breaks: true,
        gfm: true,
        tables: true
      });
      tokens = marked.lexer(data);
      inListItem = false;
      itemText = '';
      for (i = 0, len = tokens.length; i < len; i++) {
        t = tokens[i];
        switch (t.type) {
          case 'heading':
            this.h(marked.inlineLexer(t.text, tokens), t.depth);
            break;
          case 'paragraph':
            if (t.text.match(/#\{[^\}]+\}/) != null) {
              this.richText(t.text);
            } else {
              this.p(marked.inlineLexer(t.text, tokens));
            }
            break;
          case 'code':
            this.code(t.text, t.lang);
            break;
          case 'list_start':
            if (inListItem) {
              this._listItem(marked.inlineLexer(itemText, tokens));
              itemText = '';
            }
            this._listStart(t.ordered);
            break;
          case 'list_item_start':
            inListItem = true;
            break;
          case 'text':
            if (inListItem) {
              itemText += ' ' + t.text;
            }
            break;
          case 'list_item_end':
            if (inListItem) {
              this._listItem(marked.inlineLexer(itemText, tokens));
              inListItem = false;
              itemText = '';
            }
            break;
          case 'list_end':
            this._listEnd();
            break;
          default:
            console.log(t);
        }
      }
      return this;
    }
  };

}).call(this);
